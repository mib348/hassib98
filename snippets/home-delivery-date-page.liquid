<style>
    /* Minimal button styles (similar to Bootstrap 4) */
  .btn {
    display: inline-block;
    font-weight: 400;
    color: #212529;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    background-color: transparent;
    border: 1px solid transparent;
    padding: 0.375rem 0.75rem;
    font-size: 1rem;
    line-height: 1.5;
    border-radius: 0.25rem;
    cursor: pointer;
  }

  .btn-secondary {
    color: #fff;
    background-color: #6c757d;
    border-color: #6c757d;
  }
  .btn-secondary:hover {
    color: #fff;
    background-color: #5a6268;
    border-color: #545b62;
  }

  /* Dropdown wrapper */
  .dropdown {
    position: relative;
    display: inline-block;
  }

  /* .dropdown-toggle gets the caret arrow */
  .dropdown-toggle::after {
    display: inline-block;
    width: 0;
    height: 0;
    margin-left: 0.255em;
    vertical-align: 0.255em;
    content: "";
    border-top: 0.3em solid;
    border-right: 0.3em solid transparent;
    border-left: 0.3em solid transparent;
    /* "currentColor" means the arrow will match .btn text color (#fff). */
    border-top-color: currentColor;
  }

  /* The dropdown menu */
  .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    min-width: 10rem;
    padding: 0.5rem 0;
    margin: 0.125rem 0 0;
    font-size: 1rem;
    color: #212529;
    text-align: left;
    list-style: none;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid rgba(0, 0, 0, 0.15);
    border-radius: 0.25rem;
    display: none; /* hidden by default */
    z-index: 1000;  /* ensure it's above other elements */
  }
  .dropdown-menu.show {
    display: block;
  }

  /* Items inside the dropdown menu */
  .dropdown-item {
    display: block;
    width: 100%;
    padding: 0.25rem 1.5rem;
    clear: both;
    font-weight: 400;
    color: #212529;
    text-align: inherit;
    white-space: nowrap;
    background: 0 0;
    border: 0;
    text-decoration: none;
  }
  .dropdown-item:hover,
  .dropdown-item:focus {
    color: #16181b;
    background-color: #f8f9fa;
    text-decoration: none;
  }
  .dropdown-item.disabled,
  .dropdown-item:disabled {
    color: #6c757d;
    pointer-events: none;
    background-color: transparent;
  }

  .ui-datepicker {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1000; /* Adjust z-index as needed */
  }

  .homedeliverytimebtn, .homedeliverytimebtn:hover, .homedeliverydatebtn {
    background-color: rgba(0, 0, 0, 0.1) !important;
    color: rgb(255, 255, 255) !important;
    margin-left: 20px !important;
    border-style: solid !important;
    border-color: rgb(255, 255, 255) !important;
    border-width: 2px !important;
    border: 2px solid #fff !important;
    padding: 12px 20px !important;
    border-radius:0px !important;
    font-size: inherit !important;
    font-weight: inherit !important;
    font-family: inherit !important;
    line-height:1 !important;
    margin-top: -2px !important;
  }

  /* Add this CSS to make the dropdown scrollable */
  .dropdown-menu {
    max-height: 200px;
    /* Adjust the height as needed */
    overflow-y: auto;
    font-size: inherit !important;
  }
</style>

{{ '//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css' | stylesheet_tag }}
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js" defer="defer"></script>

<a data-pf-type="Button2" class="sc-brPMkR hVSHHp pf-15_ pf-button-3 homedeliverydatebtn show-button">Datum</a>
<div class="dropdown">
  <button
    data-pf-type="Button2"
    class="btn btn-secondary dropdown-toggle hVSHHp pf-17_ pf-button-3 homedeliverytimebtn show-button"
    type="button"
    id="homedeliverytimebtn"
    aria-haspopup="true"
    aria-expanded="false"
  >
    Zeitfenster
  </button>
  <div class="dropdown-menu homedeliverytimebtn_dropdown_menu" aria-labelledby="homedeliverytimebtn">
    <a class="dropdown-item station" href="/pages/datum">{{ location }}</a>
  </div>
</div>

<div id="datepicker"></div>
<br>
<br>
<br>

<script>
document.addEventListener('DOMContentLoaded', function () {
  var dropdownToggles = document.querySelectorAll('.dropdown-toggle');

  dropdownToggles.forEach(function (toggle) {
    toggle.addEventListener('click', function (e) {
      e.preventDefault();
      e.stopPropagation();
      var dropdownMenu = toggle.nextElementSibling;
      if (!dropdownMenu) return;
      dropdownMenu.classList.toggle('show');
    });
  });

  // Close dropdown if user clicks outside
  document.addEventListener('click', function (e) {
    dropdownToggles.forEach(function (toggle) {
      var dropdownMenu = toggle.nextElementSibling;
      if (
        dropdownMenu &&
        dropdownMenu.classList.contains('show') &&
        !toggle.contains(e.target) &&
        !dropdownMenu.contains(e.target)
      ) {
        dropdownMenu.classList.remove('show');
      }
    });
  });
});
</script>

<script>

function formatTimeTo12Hour(time) {
    const [hours, minutes] = time.split(':');
    const date = new Date();
    date.setHours(hours, minutes);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
}

  let pageFullyLoaded = false;

document.addEventListener('DOMContentLoaded', function() {
  document.body.addEventListener('click', function(e) {
    if ((e.target.classList.contains('homedeliverytimebtn') || e.target.classList.contains('homedeliverydatebtn')) && !pageFullyLoaded) {
      e.preventDefault(); // Prevent navigation if page hasn't fully loaded
      // Optionally, visually indicate that the link is disabled
      e.target.style.pointerEvents = 'none';
      e.target.style.opacity = '0.5';
    } else {
      // Optionally, reset visual changes if any were made
      e.target.style.pointerEvents = '';
      e.target.style.opacity = '';
    }
  });

    const homedeliverytimebtn = document.querySelector('.homedeliverytimebtn');
    const homedeliverydatebtn = document.querySelector('.homedeliverydatebtn');
    sessionStorage.setItem("location", 'Delivery');
    const strLocation = "Delivery";

    function toggleButton() {
        // 1) Get the current time in Germany (24-hour format)
        const now = new Date();
        const options = {
            timeZone: 'Europe/Berlin',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour12: false
        };

        const formatter = new Intl.DateTimeFormat([], options);
        const parts = formatter.formatToParts(now);

        let dateObj = {};
        parts.forEach(({ type, value }) => {
            dateObj[type] = value;
        });

        // Construct a Date in Germany's time zone
        const timeGermany = new Date(
        `${dateObj.year}-${dateObj.month}-${dateObj.day}T${dateObj.hour}:${dateObj.minute}:${dateObj.second}`
        );
        const currentHours = timeGermany.getHours();
        const currentMinutes = timeGermany.getMinutes();
        const currentTimeInMinutes = currentHours * 60 + currentMinutes;

        // 2) Find all time slots in the dropdown
        const timeSlots = document.querySelectorAll('.time_slot');

        // 3) For each time slot, parse its data-time_slot_start_time
        timeSlots.forEach(slot => {
            const slotTime = slot.getAttribute('data-time_slot_start_time');
            if (!slotTime) return;

            const [slotHours, slotMins] = slotTime.split(':').map(Number);
            const slotInMinutes = slotHours * 60 + slotMins;

            // 4) If the current time is strictly beyond that slotâ€™s start time, remove the slot
            //    (Use >= if you also want to remove it at the exact start minute)
            if (currentTimeInMinutes > slotInMinutes) {
                slot.remove();
            }
        });
    }

    
    if (strLocation !== "") {
        $.ajax({
            url: `https://dev.sushi.catering/getLocations/${strLocation}`,
            type: "GET",
            cache:true,
            dataType: "json",
            success: function(data) {
                var html = '';
                if (data.start_time && data.end_time) {
                    html += `<a class="dropdown-item time_slot" href="javascript:void(0);" data-time_slot_start_time="` + data.start_time + `">` + formatTimeTo12Hour(data.start_time) + ' - ' + formatTimeTo12Hour(data.end_time) + `</a>`;
                    if (data.start_time2 && data.end_time2) {
                        html += `<a class="dropdown-item time_slot" href="javascript:void(0);" data-time_slot_start_time="` + data.start_time2 + `">` + formatTimeTo12Hour(data.start_time2) + ' - ' + formatTimeTo12Hour(data.end_time2) + `</a>`;
                    }
                } else {
                    if (data.start_time) {
                        html += `<a class="dropdown-item time_slot" href="javascript:void(0);" data-time_slot_start_time="` + data.start_time + `">` + formatTimeTo12Hour(data.start_time) + `</a>`;
                    }
                    if (data.start_time2) {
                        html += `<a class="dropdown-item time_slot" href="javascript:void(0);" data-time_slot_start_time="` + data.start_time2 + `">` + formatTimeTo12Hour(data.start_time2) + `</a>`;
                    }
                }
                $(".homedeliverytimebtn_dropdown_menu").html(html);
                // Get the current date and time in Germany
                const now = new Date();
                const options = {
                    timeZone: 'Europe/Berlin',
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                };
                const formatter = new Intl.DateTimeFormat('en-GB', options); // 'en-GB' for 24-hour format
                const parts = formatter.formatToParts(now);
            
                let dateObj = {};
                parts.forEach(({ type, value }) => {
                    dateObj[type] = value;
                });
            
                let minDate = 0; // Default to today
              
                const currentHours = parseInt(dateObj.hour, 10);
                const currentMinutes = parseInt(dateObj.minute, 10);
                const currentTimeInMinutes = currentHours * 60 + currentMinutes;

                if (data.note)
                    $("#note").html(data.note);
              
                // // Handle location_toggle state
                if (data.is_active === 'Y') {
                //     //homedeliverytimebtn.classList.add('show-button');
                    homedeliverydatebtn.classList.add('show-button');
                    homedeliverytimebtn.classList.add('show-button');

                //     //today order button aka immediate order button aka instant order button
                //     if (data.start_time && data.end_time && data.is_active === 'Y') {
                        toggleButton();
                        setInterval(() => toggleButton(), 60000);                     
                //     } else if (data.error) {
                //         console.error('Error fetching location Settings:', data.error);
                //     }

                } 
                else {
                    homedeliverydatebtn.classList.remove('show-button');
                    homedeliverytimebtn.classList.remove('show-button');
                }        
                
                //$(".loading_icon").hide();
            },
            error: function(request, status, error) {
                console.error('Error fetching location time:', error);
            }
        });
    }
});

function redirect(dateText, timeSlot){
    $.ajax({
        url: "https://dev.sushi.catering/updateSelectedDate/" + dateText,
        type: "GET",
        data: { "uuid": localStorage.getItem("uuid") },
        cache: false,
        async: false,
        dataType: "json",
        success: function(data) {
                window.location.href = "/pages/order-menue?location=Delivery&timeslot=" + timeSlot + "&immediate_inventory=N&no_station=N&additional_inventory=N&additional_inventory_time=N&uuid=" + localStorage.getItem("uuid");
        },
        error: function(request, status, error) {
            alert('Fehler beim Einstellen des ausgewÃ¤hlten Datums. Bitte versuchen Sie es nach dem Aktualisieren der Seite erneut.');
            console.log('Set selected date error:', error);
        }
    });
}

window.onload = function() {
    pageFullyLoaded = true;
    if (window.jQuery) {
        let $ = window.jQuery;

        const randomNum = Math.random();

        $(".homedeliverytimebtn, .homedeliverydatebtn").each(function() {
            // Reset any inline styles that might have been applied to indicate disabled state
            this.style.pointerEvents = '';
            this.style.opacity = '';
        });

        var button = $(".homedeliverydatebtn");
        var buttonOffset = button.offset();
        
        // Calculate new top and left positions
        var newTop = buttonOffset.top + button.outerHeight();
        var newLeft = buttonOffset.left;
        
        // Apply the calculated positions
        $("#datepicker").datepicker('hide');

        // -------------------------------------------------------------
        // Only these lines inside the click handler have been updated.
        // -------------------------------------------------------------
        $(document).on("click", ".time_slot, .homedeliverydatebtn", function(e){
            e.preventDefault();

            if($(this).hasClass("time_slot")) {
                sessionStorage.setItem("time_slot", $(this).data("time_slot_start_time"));

                // If date is not set, close time dropdown & open date
                if(!sessionStorage.getItem("date")){
                    // Close the dropdown if open
                    let dropdownMenu = $(".homedeliverytimebtn_dropdown_menu");
                    if (dropdownMenu.hasClass("show")) {
                      dropdownMenu.removeClass("show");
                    }
                    // Now open the datepicker
                    $(".homedeliverydatebtn").click();
                    return;
                }
                else{
                    redirect(sessionStorage.getItem("date"), $(this).data("time_slot_start_time"));
                }
            }
            else {
                    // If we do have a time_slot, proceed with normal flow
                    // (the rest of the code remains unaltered)
                    // Get today's date if needed, etc.
                    // Then open the jQuery datepicker or redirect...
                    
                    // Get the offset of the button
                    const buttonOffset = $(this).offset();
                    const buttonHeight = $(this).outerHeight();
                    
                    // Calculate the new top and left positions for the datepicker
                    const newTop = buttonOffset.top + buttonHeight;
                    const newLeft = buttonOffset.left + 150;
                
                    // Get the current date and time in Germany
                    const now = new Date();
                    const options = {
                        timeZone: 'Europe/Berlin',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    };
                    const formatter = new Intl.DateTimeFormat('en-GB', options); // 'en-GB' for 24-hour format
                    const parts = formatter.formatToParts(now);
                
                    let dateObj = {};
                    parts.forEach(({ type, value }) => {
                        dateObj[type] = value;
                    });
                
                    let minDate = 0; // Default to today
                
                    const currentHours = parseInt(dateObj.hour, 10);
                    const currentMinutes = parseInt(dateObj.minute, 10);
                    const currentTimeInMinutes = currentHours * 60 + currentMinutes;
                
                    // Initialize the datepicker
                    $("#datepicker").datepicker({
                        minDate: minDate,
                        maxDate: '+6d',
                        dateFormat: "dd-mm-yy",
                        onSelect: function(dateText, inst) {
                            sessionStorage.setItem("date", dateText);
                        
                            if(!sessionStorage.getItem("time_slot")){
                                $("#datepicker").datepicker("destroy");
                                $(".homedeliverytimebtn").click();
                                return;
                            }
                            else{
                                redirect(dateText, sessionStorage.getItem("time_slot"));
                            }
                        }
                    }).datepicker('show');
                    
                    $('.ui-datepicker').addClass('notranslate');
            }
        });
        // -------------------------------------------------------------

     }
}
</script>
